// <auto-generated />
using System;
using System.Collections.Generic;
using Blog.Services.Blogging.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Blog.Services.Blogging.API.Infrastructure.Migrations
{
    [DbContext(typeof(BloggingDbContext))]
    [Migration("20221124124555_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.PostBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("category");

                    b.Property<int>("Comments")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("comments_count");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Instant?>("EditedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_at");

                    b.Property<string>("HeaderImgUrl")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("header_img_url");

                    b.Property<int>("Likes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("likes_count");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("views_count");

                    b.Property<byte[]>("row_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.HasKey("Id")
                        .HasName("pk_posts");

                    b.HasIndex("Category")
                        .HasDatabaseName("ix_posts_category");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Category"), "hash");

                    b.HasIndex("CreatedAt")
                        .IsDescending()
                        .HasDatabaseName("ix_posts_created_at");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("CreatedAt"), "btree");

                    b.HasIndex("Likes")
                        .HasDatabaseName("ix_posts_likes_count");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Likes"), "btree");

                    b.HasIndex("Views")
                        .HasDatabaseName("ix_posts_views_count");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Views"), "btree");

                    b.HasIndex("Status", "CreatedAt")
                        .IsDescending()
                        .HasDatabaseName("ix_posts_status_created_at");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Status", "CreatedAt"), "btree");

                    b.ToTable("posts", "blogging");

                    b.HasDiscriminator<string>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.PostTranslationBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("language");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(60)")
                        .HasColumnName("title");

                    b.Property<byte[]>("row_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<string>("translation_type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("translation_type");

                    b.HasKey("Id")
                        .HasName("pk_post_translations");

                    b.HasIndex("PostId", "Language")
                        .IsUnique()
                        .HasDatabaseName("ix_post_translations_post_id_language");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PostId", "Language"), "btree");

                    b.HasIndex("Title", "Description", "Content")
                        .HasDatabaseName("ix_post_translations_base_english")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english");

                    b.ToTable("post_translations", "blogging");

                    b.HasDiscriminator<string>("translation_type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Blog.Services.Blogging.Domain.AggregatesModel.TagAggregate.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("language");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("value");

                    b.Property<byte[]>("row_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.HasIndex("Value")
                        .HasDatabaseName("ix_tags_value");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Value"), "btree");

                    b.HasIndex("Language", "Value")
                        .IsUnique()
                        .HasDatabaseName("ix_tags_language_value");

                    b.ToTable("tags", "blogging");
                });

            modelBuilder.Entity("Blog.Services.Blogging.Infrastructure.Idempotency.IdentifiedRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_requests");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_requests_type");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Type"), "hash");

                    b.ToTable("requests", "blogging");
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.InboxState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Consumed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("consumed");

                    b.Property<Guid>("ConsumerId")
                        .HasColumnType("uuid")
                        .HasColumnName("consumer_id");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_time");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("last_sequence_number");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uuid")
                        .HasColumnName("lock_id");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<int>("ReceiveCount")
                        .HasColumnType("integer")
                        .HasColumnName("receive_count");

                    b.Property<DateTime>("Received")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.HasKey("Id")
                        .HasName("pk_inbox_state");

                    b.HasAlternateKey("MessageId", "ConsumerId")
                        .HasName("ak_inbox_state_message_id_consumer_id");

                    b.HasIndex("Delivered")
                        .HasDatabaseName("ix_inbox_state_delivered");

                    b.ToTable("inbox_state", "outbox");
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", b =>
                {
                    b.Property<long>("SequenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence_number");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SequenceNumber"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("content_type");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversation_id");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uuid")
                        .HasColumnName("correlation_id");

                    b.Property<string>("DestinationAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("destination_address");

                    b.Property<DateTime?>("EnqueueTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enqueue_time");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_time");

                    b.Property<string>("FaultAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("fault_address");

                    b.Property<string>("Headers")
                        .HasColumnType("text")
                        .HasColumnName("headers");

                    b.Property<Guid?>("InboxConsumerId")
                        .HasColumnType("uuid")
                        .HasColumnName("inbox_consumer_id");

                    b.Property<Guid?>("InboxMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("inbox_message_id");

                    b.Property<Guid?>("InitiatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("initiator_id");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<Guid?>("OutboxId")
                        .HasColumnType("uuid")
                        .HasColumnName("outbox_id");

                    b.Property<string>("Properties")
                        .HasColumnType("text")
                        .HasColumnName("properties");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("request_id");

                    b.Property<string>("ResponseAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("response_address");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_time");

                    b.Property<string>("SourceAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("source_address");

                    b.HasKey("SequenceNumber")
                        .HasName("pk_message");

                    b.HasIndex("EnqueueTime")
                        .HasDatabaseName("ix_message_enqueue_time");

                    b.HasIndex("ExpirationTime")
                        .HasDatabaseName("ix_message_expiration_time");

                    b.HasIndex("OutboxId", "SequenceNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_message_outbox_id_sequence_number");

                    b.HasIndex("InboxMessageId", "InboxConsumerId", "SequenceNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_message_inbox_message_id_inbox_consumer_id_sequence_number");

                    b.ToTable("message", "outbox");
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxState", b =>
                {
                    b.Property<Guid>("OutboxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("outbox_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("last_sequence_number");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uuid")
                        .HasColumnName("lock_id");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.HasKey("OutboxId")
                        .HasName("pk_outbox_state");

                    b.HasIndex("Created")
                        .HasDatabaseName("ix_outbox_state_created");

                    b.ToTable("outbox_state", "outbox");
                });

            modelBuilder.Entity("post_translations_tags", b =>
                {
                    b.Property<Guid>("post_translation_id")
                        .HasColumnType("uuid")
                        .HasColumnName("post_translation_id");

                    b.Property<Guid>("tag_id")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.HasKey("post_translation_id", "tag_id")
                        .HasName("pk_post_translations_tags");

                    b.HasIndex("tag_id")
                        .HasDatabaseName("ix_post_translations_tags_tag_id");

                    b.ToTable("post_translations_tags", "blogging");
                });

            modelBuilder.Entity("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.LifestylePostAggregate.LifestylePost", b =>
                {
                    b.HasBaseType("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.PostBase");

                    b.HasDiscriminator().HasValue("lifestyle");
                });

            modelBuilder.Entity("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.RecipePostAggregate.RecipePost", b =>
                {
                    b.HasBaseType("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.PostBase");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("recipe_difficulty");

                    b.Property<string>("FoodComposition")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("recipe_food_composition");

                    b.Property<string>("Meal")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("recipe_meal");

                    b.Property<int>("Servings")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_servings_count");

                    b.Property<string>("SongUrl")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("recipe_song_url");

                    b.Property<List<string>>("_preparationMethods")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("recipe_preparation_methods");

                    b.Property<List<string>>("_tastes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("recipe_tastes");

                    b.HasDiscriminator().HasValue("recipe");
                });

            modelBuilder.Entity("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.ReviewPostAggregate.ReviewPostBase", b =>
                {
                    b.HasBaseType("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.PostBase");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("review_rating");
                });

            modelBuilder.Entity("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.LifestylePostAggregate.LifestylePostTranslation", b =>
                {
                    b.HasBaseType("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.PostTranslationBase");

                    b.HasDiscriminator().HasValue("lifestyle");
                });

            modelBuilder.Entity("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.RecipePostAggregate.RecipePostTranslation", b =>
                {
                    b.HasBaseType("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.PostTranslationBase");

                    b.Property<string>("Cuisine")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("recipe_cuisine");

                    b.Property<string>("DishName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("recipe_dish_name");

                    b.Property<List<string>>("_ingredients")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("recipe_ingredients");

                    b.HasIndex("Title", "Description", "Content", "Cuisine", "DishName")
                        .HasDatabaseName("ix_post_translations_recipe_english")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english");

                    b.HasDiscriminator().HasValue("recipe");
                });

            modelBuilder.Entity("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.ReviewPostAggregate.ReviewPostTranslationBase", b =>
                {
                    b.HasBaseType("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.PostTranslationBase");
                });

            modelBuilder.Entity("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.ReviewPostAggregate.ProductReviewPost", b =>
                {
                    b.HasBaseType("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.ReviewPostAggregate.ReviewPostBase");

                    b.HasDiscriminator().HasValue("productreview");
                });

            modelBuilder.Entity("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.ReviewPostAggregate.RestaurantReviewPost", b =>
                {
                    b.HasBaseType("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.ReviewPostAggregate.ReviewPostBase");

                    b.HasDiscriminator().HasValue("restaurantreview");
                });

            modelBuilder.Entity("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.ReviewPostAggregate.ProductReviewPostTranslation", b =>
                {
                    b.HasBaseType("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.ReviewPostAggregate.ReviewPostTranslationBase");

                    b.HasDiscriminator().HasValue("productreview");
                });

            modelBuilder.Entity("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.ReviewPostAggregate.RestaurantReviewPostTranslation", b =>
                {
                    b.HasBaseType("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.ReviewPostAggregate.ReviewPostTranslationBase");

                    b.Property<List<string>>("_restaurantCuisines")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("review_restaurant_cuisines");

                    b.HasDiscriminator().HasValue("restaurantreview");
                });

            modelBuilder.Entity("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.PostBase", b =>
                {
                    b.OwnsOne("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.User", "Author", b1 =>
                        {
                            b1.Property<Guid>("PostBaseId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid?>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("author_id");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("varchar(32)")
                                .HasColumnName("author_name");

                            b1.Property<byte[]>("row_version")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("bytea")
                                .HasColumnName("row_version");

                            b1.HasKey("PostBaseId");

                            b1.HasIndex("Id")
                                .HasDatabaseName("ix_posts_author_id");

                            NpgsqlIndexBuilderExtensions.HasMethod(b1.HasIndex("Id"), "hash");

                            b1.ToTable("posts", "blogging");

                            b1.WithOwner()
                                .HasForeignKey("PostBaseId")
                                .HasConstraintName("fk_posts_posts_id");
                        });

                    b.OwnsOne("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.User", "Editor", b1 =>
                        {
                            b1.Property<Guid>("PostBaseId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid?>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("editor_id");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("varchar(32)")
                                .HasColumnName("editor_name");

                            b1.Property<byte[]>("row_version")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("bytea")
                                .HasColumnName("row_version");

                            b1.HasKey("PostBaseId");

                            b1.ToTable("posts", "blogging");

                            b1.WithOwner()
                                .HasForeignKey("PostBaseId")
                                .HasConstraintName("fk_posts_posts_id");
                        });

                    b.Navigation("Author")
                        .IsRequired();

                    b.Navigation("Editor");
                });

            modelBuilder.Entity("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.PostTranslationBase", b =>
                {
                    b.HasOne("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.PostBase", null)
                        .WithMany("Translations")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_translations_posts_post_id");
                });

            modelBuilder.Entity("post_translations_tags", b =>
                {
                    b.HasOne("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.PostTranslationBase", null)
                        .WithMany()
                        .HasForeignKey("post_translation_id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_post_translations_tags_post_translations_post_translation_id");

                    b.HasOne("Blog.Services.Blogging.Domain.AggregatesModel.TagAggregate.Tag", null)
                        .WithMany()
                        .HasForeignKey("tag_id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_post_translations_tags_tags_tag_id");
                });

            modelBuilder.Entity("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.RecipePostAggregate.RecipePost", b =>
                {
                    b.OwnsOne("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.RecipePostAggregate.RecipeTime", "Time", b1 =>
                        {
                            b1.Property<Guid>("RecipePostId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("CookingTime")
                                .HasColumnType("integer")
                                .HasColumnName("recipe_cooking_minutes");

                            b1.Property<int>("PreparationTime")
                                .HasColumnType("integer")
                                .HasColumnName("recipe_preparation_minutes");

                            b1.Property<byte[]>("row_version")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("bytea")
                                .HasColumnName("row_version");

                            b1.HasKey("RecipePostId");

                            b1.ToTable("posts", "blogging");

                            b1.WithOwner()
                                .HasForeignKey("RecipePostId")
                                .HasConstraintName("fk_posts_posts_id");
                        });

                    b.Navigation("Time")
                        .IsRequired();
                });

            modelBuilder.Entity("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.ReviewPostAggregate.ProductReviewPost", b =>
                {
                    b.OwnsOne("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.ReviewPostAggregate.Product", "Product", b1 =>
                        {
                            b1.Property<Guid>("ProductReviewPostId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("varchar(60)")
                                .HasColumnName("review_item_name");

                            b1.Property<string>("WebsiteUrl")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("varchar(500)")
                                .HasColumnName("review_item_website_url");

                            b1.Property<byte[]>("row_version")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("bytea")
                                .HasColumnName("row_version");

                            b1.HasKey("ProductReviewPostId");

                            b1.ToTable("posts", "blogging");

                            b1.WithOwner()
                                .HasForeignKey("ProductReviewPostId")
                                .HasConstraintName("fk_posts_posts_id");
                        });

                    b.Navigation("Product")
                        .IsRequired();
                });

            modelBuilder.Entity("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.ReviewPostAggregate.RestaurantReviewPost", b =>
                {
                    b.OwnsOne("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.ReviewPostAggregate.Restaurant", "Restaurant", b1 =>
                        {
                            b1.Property<Guid>("RestaurantReviewPostId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("varchar(60)")
                                .HasColumnName("review_item_name");

                            b1.Property<string>("WebsiteUrl")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("varchar(500)")
                                .HasColumnName("review_item_website_url");

                            b1.Property<byte[]>("row_version")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("bytea")
                                .HasColumnName("row_version");

                            b1.HasKey("RestaurantReviewPostId");

                            b1.ToTable("posts", "blogging");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantReviewPostId")
                                .HasConstraintName("fk_posts_posts_id");
                        });

                    b.Navigation("Restaurant")
                        .IsRequired();
                });

            modelBuilder.Entity("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.ReviewPostAggregate.RestaurantReviewPostTranslation", b =>
                {
                    b.OwnsOne("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.ReviewPostAggregate.Address", "RestaurantAddress", b1 =>
                        {
                            b1.Property<Guid>("RestaurantReviewPostTranslationId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("varchar(50)")
                                .HasColumnName("review_restaurant_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("varchar(50)")
                                .HasColumnName("review_restaurant_country");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("varchar(50)")
                                .HasColumnName("review_restaurant_street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("varchar(10)")
                                .HasColumnName("review_restaurant_zipcode");

                            b1.Property<byte[]>("row_version")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("bytea")
                                .HasColumnName("row_version");

                            b1.HasKey("RestaurantReviewPostTranslationId");

                            b1.ToTable("post_translations", "blogging");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantReviewPostTranslationId")
                                .HasConstraintName("fk_post_translations_post_translations_id");
                        });

                    b.Navigation("RestaurantAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("Blog.Services.Blogging.Domain.AggregatesModel.PostAggregate.PostBase", b =>
                {
                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
