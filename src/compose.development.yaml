version: '3.9'
services:
  rabbitmq:
    image: rabbitmq:management-alpine
    container_name: ${RABBITMQ_HOSTNAME}
    restart: on-failure
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
    ports:
      - ${RABBITMQ_PORT}
    networks:
      - event-bus

  discovery-register:
    image: redis:alpine
    container_name: '${DISCOVERY_REGISTER_HOSTNAME}'
    restart: on-failure
    ports:
      - ${DISCOVERY_REGISTER_PORT}
    networks:
      - discovery

  discovery-db:
    image: postgres:alpine
    container_name: ${DISCOVERY_DB_HOSTNAME}
    restart: on-failure
    deploy:
      mode: global
    environment:
      POSTGRES_USER: '${DISCOVERY_DB_POSTGRES_USER}'
      POSTGRES_PASSWORD: '${DISCOVERY_DB_POSTGRES_PASSWORD}'
    ports:
      - ${DISCOVERY_DB_PORT}
    networks:
      - discovery

  discovery-api-proxy:
    image: nginx
    volumes:
      - ./nginx-conf.template:/etc/nginx/templates/default.conf.template
    container_name: ${DISCOVERY_API_HOSTNAME}
    restart: on-failure
    deploy:
      mode: global
    links:
      - 'discovery-api:${DISCOVERY_API_HOSTNAME}'
    environment:
      - NGINX_HOST=${DISCOVERY_API_HOSTNAME}
      - NGINX_PORT=${DISCOVERY_API_PORT}
    depends_on:
      - discovery-api
    ports:
      - ${DISCOVERY_API_PORT}
    networks:
      - discovery
      - webgateway

  discovery-api:
    image: blog/discovery-api
    restart: on-failure
    deploy:
      mode: replicated
      replicas: 3
    build:
      context: .
      dockerfile: Services/Discovery/Discovery.API/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      HOSTNAME: ${DISCOVERY_API_HOSTNAME}
      PORT: ${DISCOVERY_API_PORT}
      CONNECTIONSTRINGS__EVENTBUS: 'rabbitmq://${RABBITMQ_USER}:${RABBITMQ_PASS}@${RABBITMQ_HOSTNAME}:5672/${RABBITMQ_VHOST}'
      CONNECTIONSTRINGS__DISCOVERYREGISTER: '${DISCOVERY_REGISTER_HOSTNAME}:6379,allowAdmin=true'
      CONNECTIONSTRINGS__DISCOVERYDB: 'host=${DISCOVERY_DB_HOSTNAME};port=5432;database=${DISCOVERY_DB_HOSTNAME};password=${DISCOVERY_DB_POSTGRES_PASSWORD};username=${DISCOVERY_DB_POSTGRES_USER}'
    depends_on:
      - rabbitmq
      - discovery-register
    ports:
      - ${DISCOVERY_API_PORT}
    networks:
      - discovery
      - event-bus

  emailing-db:
    image: postgres:alpine
    container_name: ${EMAILING_DB_HOSTNAME}
    restart: on-failure
    deploy:
      mode: global
    environment:
      POSTGRES_USER: '${EMAILING_DB_POSTGRES_USER}'
      POSTGRES_PASSWORD: '${EMAILING_DB_POSTGRES_PASSWORD}'
    ports:
      - ${EMAILING_DB_PORT}
    networks:
      - emailing

  emailing-api-proxy:
    image: nginx
    volumes:
      - ./nginx-conf.template:/etc/nginx/templates/default.conf.template
    container_name: ${EMAILING_API_HOSTNAME}
    restart: on-failure
    deploy:
      mode: global
    links:
      - 'emailing-api:${EMAILING_API_HOSTNAME}'
    environment:
      - NGINX_HOST=${EMAILING_API_HOSTNAME}
      - NGINX_PORT=${EMAILING_API_PORT}
    depends_on:
      - emailing-api
    ports:
      - ${EMAILING_API_PORT}
    networks:
      - emailing
      - webgateway

  emailing-api:
    image: blog/emailing-api
    restart: on-failure
    deploy:
      mode: replicated
      replicas: 3
    build:
      context: .
      dockerfile: Services/Emailing/Emailing.API/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      HOSTNAME: ${EMAILING_API_HOSTNAME}
      PORT: ${EMAILING_API_PORT}
      CONNECTIONSTRINGS__EVENTBUS: 'rabbitmq://${RABBITMQ_USER}:${RABBITMQ_PASS}@${RABBITMQ_HOSTNAME}:5672/${RABBITMQ_VHOST}'
      CONNECTIONSTRINGS__EMAILINGDB: 'host=${EMAILING_DB_HOSTNAME};port=5432;database=${EMAILING_DB_HOSTNAME};password=${EMAILING_DB_POSTGRES_PASSWORD};username=${EMAILING_DB_POSTGRES_USER}'
    depends_on:
      - rabbitmq
      - discovery-api
      - emailing-db
    ports:
      - ${EMAILING_API_PORT}
    networks:
      - emailing
      - event-bus

  # identity-db:
  #   image: postgres:alpine
  #   container_name: ${IDENTITY_DB_HOSTNAME}
  #   restart: on-failure
  #   environment:
  #     POSTGRES_USER: '${IDENTITY_DB_POSTGRES_USER}'
  #     POSTGRES_PASSWORD: '${IDENTITY_DB_POSTGRES_PASSWORD}'
  #   ports:
  #     - ${IDENTITY_DB_PORT}
  #   networks:
  #     - identity

  # identity-api-proxy:
  #   image: nginx
  #   volumes:
  #     - ./nginx-conf.template:/etc/nginx/templates/default.conf.template
  #   container_name: ${IDENTITY_API_HOSTNAME}
  #   restart: on-failure
  #   deploy:
  #     mode: global
  #   links:
  #     - 'identity-api:${IDENTITY_API_HOSTNAME}'
  #   environment:
  #     - NGINX_HOST=${IDENTITY_API_HOSTNAME}
  #     - NGINX_PORT=${IDENTITY_API_PORT}
  #   depends_on:
  #     - identity-api
  #   ports:
  #     - ${IDENTITY_API_PORT}
  #   networks:
  #     - identity
  #     - webgateway

  # identity-api:
  #   image: blog/identity-api
  #   restart: on-failure
  # deploy:
  #   mode: replicated
  #   replicas: 3
  #   build:
  #     context: .
  #     dockerfile: Services/Identity/Identity.API/Dockerfile
  #   environment:
  #     ASPNETCORE_ENVIRONMENT: Development
  #     HOSTNAME: ${IDENTITY_API_HOSTNAME}
  #     PORT: ${IDENTITY_API_PORT}
  #     CONNECTIONSTRINGS__IDENTITYDB: 'host=${IDENTITY_DB_HOSTNAME};port=5432;database=${IDENTITY_DB_HOSTNAME};password=${IDENTITY_DB_POSTGRES_PASSWORD};username=${IDENTITY_DB_POSTGRES_USER}'
  #     CONNECTIONSTRINGS__EVENTBUS: 'rabbitmq://${RABBITMQ_USER}:${RABBITMQ_PASS}@${RABBITMQ_HOSTNAME}:5672/${RABBITMQ_VHOST}'
  #   depends_on:
  #     - rabbitmq
  #     - identity-db
  #     - discovery-api
  #     - emailing-api
  #   ports:
  #     - ${IDENTITY_API_PORT}
  #   networks:
  #     - identity
  #     - event-bus

  blogging-db:
    image: postgres:alpine
    container_name: ${BLOGGING_DB_HOSTNAME}
    restart: on-failure
    deploy:
      mode: global
    environment:
      POSTGRES_USER: '${BLOGGING_DB_POSTGRES_USER}'
      POSTGRES_PASSWORD: '${BLOGGING_DB_POSTGRES_PASSWORD}'
    ports:
      - ${BLOGGING_DB_PORT}
    networks:
      - blogging

  blogging-api-proxy:
    image: nginx
    volumes:
      - ./nginx-conf.template:/etc/nginx/templates/default.conf.template
    container_name: ${BLOGGING_API_HOSTNAME}
    restart: on-failure
    deploy:
      mode: global
    links:
      - 'blogging-api:${BLOGGING_API_HOSTNAME}'
    environment:
      - NGINX_HOST=${BLOGGING_API_HOSTNAME}
      - NGINX_PORT=${BLOGGING_API_PORT}
    depends_on:
      - blogging-api
    ports:
      - ${BLOGGING_API_PORT}
    networks:
      - blogging
      - webgateway

  blogging-api:
    image: blog/blogging-api
    restart: on-failure
    deploy:
      mode: replicated
      replicas: 3
    build:
      context: .
      dockerfile: Services/Blogging/Blogging.API/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      HOSTNAME: ${BLOGGING_API_HOSTNAME}
      PORT: ${BLOGGING_API_PORT}
      CONNECTIONSTRINGS__BLOGGINGDB: 'host=${BLOGGING_DB_HOSTNAME};port=5432;database=${BLOGGING_DB_HOSTNAME};password=${BLOGGING_DB_POSTGRES_PASSWORD};username=${BLOGGING_DB_POSTGRES_USER}'
      CONNECTIONSTRINGS__EVENTBUS: 'rabbitmq://${RABBITMQ_USER}:${RABBITMQ_PASS}@${RABBITMQ_HOSTNAME}:5672/${RABBITMQ_VHOST}'
    depends_on:
      - rabbitmq
      - blogging-db
      - discovery-ap
      - emailing-ap
    ports:
      - ${BLOGGING_API_PORT}
    networks:
      - blogging
      - event-bus

  comments-db:
    image: postgres:alpine
    container_name: ${COMMENTS_DB_HOSTNAME}
    restart: on-failure
    deploy:
      mode: global
    environment:
      POSTGRES_USER: '${COMMENTS_DB_POSTGRES_USER}'
      POSTGRES_PASSWORD: '${COMMENTS_DB_POSTGRES_PASSWORD}'
    ports:
      - ${COMMENTS_DB_PORT}
    networks:
      - comments

  comments-api-proxy:
    image: nginx
    volumes:
      - ./nginx-conf.template:/etc/nginx/templates/default.conf.template
    container_name: ${COMMENTS_API_HOSTNAME}
    restart: on-failure
    deploy:
      mode: global
    links:
      - 'comments-api:${COMMENTS_API_HOSTNAME}'
    environment:
      - NGINX_HOST=${COMMENTS_API_HOSTNAME}
      - NGINX_PORT=${COMMENTS_API_PORT}
    depends_on:
      - comments-api
    ports:
      - ${COMMENTS_API_PORT}
    networks:
      - comments
      - webgateway

  comments-api:
    image: blog/comments-api
    restart: on-failure
    deploy:
      mode: replicated
      replicas: 3
    build:
      context: .
      dockerfile: Services/Comments/Comments.API/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      HOSTNAME: ${COMMENTS_API_HOSTNAME}
      PORT: ${COMMENTS_API_PORT}
      CONNECTIONSTRINGS__EVENTBUS: 'rabbitmq://${RABBITMQ_USER}:${RABBITMQ_PASS}@${RABBITMQ_HOSTNAME}:5672/${RABBITMQ_VHOST}'
      CONNECTIONSTRINGS__COMMENTSDB: 'host=${COMMENTS_DB_HOSTNAME};port=5432;database=${COMMENTS_DB_HOSTNAME};password=${COMMENTS_DB_POSTGRES_PASSWORD};username=${COMMENTS_DB_POSTGRES_USER}'
    depends_on:
      - rabbitmq
      - comments-db
      - discovery-api
      - emailing-api
      - blogging-api
    ports:
      - ${COMMENTS_API_PORT}
    networks:
      - comments
      - event-bus

  webgateway-api:
    image: blog/webgateway-api
    restart: on-failure
    container_name: ${WEBGATEWAY_API_HOSTNAME}
    build:
      context: .
      dockerfile: Gateways/WebGateway.API/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      CONNECTIONSTRINGS__EVENTBUS: 'rabbitmq://${RABBITMQ_USER}:${RABBITMQ_PASS}@${RABBITMQ_HOSTNAME}:5672/${RABBITMQ_VHOST}'
      URLS__DISCOVERYSERVICE: '${DISCOVERY_API_HOSTNAME}:${DISCOVERY_API_PORT}'
    deploy:
      mode: global
    depends_on:
      - rabbitmq1
      - discovery-api-proxy
      # - identity-api
      - blogging-api-proxy
      - comments-api-proxy
      - emailing-api-proxy
    ports:
      - ${WEBGATEWAY_API_PORT}:${WEBGATEWAY_API_PORT}
    networks:
      - webgateway
      - event-bus

networks:
  event-bus:
  discovery:
  emailing:
  identity:
  blogging:
  comments:
  webgateway:
