services:
  rabbitmq1: &rabbitmq_base
    image: rabbitmq:management-alpine
    container_name: ${RABBITMQ_HOSTNAME}
    restart: on-failure
    environment: &rabbitmq_env
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
    ports:
      - ${RABBITMQ_PORT}
  rabbitmq2:
    <<: *rabbitmq_base
    container_name: '${RABBITMQ_HOSTNAME}2'
    environment:
      <<: *rabbitmq_env
  rabbitmq3:
    <<: *rabbitmq_base
    container_name: '${RABBITMQ_HOSTNAME}3'
    environment:
      <<: *rabbitmq_env

  discovery-register1: &discovery-register_base
    image: redis:alpine
    container_name: '${DISCOVERY_REGISTER_HOSTNAME}1'
    restart: on-failure
    ports:
      - ${DISCOVERY_REGISTER_PORT}
  discovery-register2:
    <<: *discovery-register_base
    container_name: '${DISCOVERY_REGISTER_HOSTNAME}2'
  discovery-register3:
    <<: *discovery-register_base
    container_name: '${DISCOVERY_REGISTER_HOSTNAME}3'

  discovery-api1: &discovery-api_base
    image: blog/discovery-api
    container_name: '${DISCOVERY_API_HOSTNAME}1'
    restart: on-failure
    build:
      context: .
      dockerfile: Services/Discovery/Discovery.API/Dockerfile
    environment: &discovery-api_env
      ASPNETCORE_ENVIRONMENT: Development
      HOSTNAME: '${DISCOVERY_API_HOSTNAME}1'
      PORT: ${DISCOVERY_API_PORT}
      CONNECTIONSTRINGS__EVENTBUS: 'rabbitmq://${RABBITMQ_USER}:${RABBITMQ_PASS}@${RABBITMQ_HOSTNAME}:5672/${RABBITMQ_VHOST}'
      CONNECTIONSTRINGS__DISCOVERYREGISTER: '${DISCOVERY_REGISTER_HOSTNAME}:${DISCOVERY_REGISTER_PORT},allowAdmin=true'
    depends_on:
      - rabbitmq1
      - discovery-register1
    ports:
      - ${DISCOVERY_API_PORT}
  discovery-api2:
    <<: *discovery-api_base
    container_name: '${DISCOVERY_API_HOSTNAME}2'
    environment:
      <<: *discovery-api_env
      HOSTNAME: '${DISCOVERY_API_HOSTNAME}2'
  discovery-api3:
    <<: *discovery-api_base
    container_name: '${DISCOVERY_API_HOSTNAME}3'
    environment:
      <<: *discovery-api_env
      HOSTNAME: '${DISCOVERY_API_HOSTNAME}3'

  emailing-db:
    image: postgres:alpine
    container_name: ${EMAILING_DB_HOSTNAME}
    restart: on-failure
    deploy:
      mode: global
    environment:
      POSTGRES_USER: '${EMAILING_DB_POSTGRES_USER}'
      POSTGRES_PASSWORD: '${EMAILING_DB_POSTGRES_PASSWORD}'
    ports:
      - ${EMAILING_DB_PORT}

  emailing-api1: &emailing-api_base
    image: blog/emailing-api
    container_name: '${EMAILING_API_HOSTNAME}1'
    restart: on-failure
    build:
      context: .
      dockerfile: Services/Emailing/Emailing.API/Dockerfile
    environment: &emailing-api_env
      ASPNETCORE_ENVIRONMENT: Development
      HOSTNAME: '${EMAILING_API_HOSTNAME}1'
      PORT: ${EMAILING_API_PORT}
      CONNECTIONSTRINGS__EVENTBUS: 'rabbitmq://${RABBITMQ_USER}:${RABBITMQ_PASS}@${RABBITMQ_HOSTNAME}:5672/${RABBITMQ_VHOST}'
      CONNECTIONSTRINGS__EMAILINGDB: 'host=${EMAILING_DB_HOSTNAME};port=5432;database=${EMAILING_DB_HOSTNAME};password=${EMAILING_DB_POSTGRES_PASSWORD};username=${EMAILING_DB_POSTGRES_USER}'
    depends_on:
      - rabbitmq1
      - discovery-api1
      - emailing-db
    ports:
      - ${EMAILING_API_PORT}
  emailing-api2:
    <<: *emailing-api_base
    container_name: '${EMAILING_API_HOSTNAME}2'
    environment:
      <<: *emailing-api_env
      HOSTNAME: '${EMAILING_API_HOSTNAME}2'
  emailing-api3:
    <<: *emailing-api_base
    container_name: '${EMAILING_API_HOSTNAME}3'
    environment:
      <<: *emailing-api_env
      HOSTNAME: '${EMAILING_API_HOSTNAME}3'

  identity-db:
    image: postgres:alpine
    container_name: ${IDENTITY_DB_HOSTNAME}
    restart: on-failure
    deploy:
      mode: global
    environment:
      POSTGRES_USER: '${IDENTITY_DB_POSTGRES_USER}'
      POSTGRES_PASSWORD: '${IDENTITY_DB_POSTGRES_PASSWORD}'
    ports:
      - ${IDENTITY_DB_PORT}

  identity-api: &identity-api_base
    image: blog/identity-api
    container_name: ${IDENTITY_API_HOSTNAME}
    restart: on-failure
    build:
      context: .
      dockerfile: Services/Identity/Identity.API/Dockerfile
    environment: &identity-api_env
      ASPNETCORE_ENVIRONMENT: Development
      HOSTNAME: ${IDENTITY_API_HOSTNAME}
      PORT: ${IDENTITY_API_PORT}
      CONNECTIONSTRINGS__IDENTITYDB: 'host=${IDENTITY_DB_HOSTNAME};port=5432;database=${IDENTITY_DB_HOSTNAME};password=${IDENTITY_DB_POSTGRES_PASSWORD};username=${IDENTITY_DB_POSTGRES_USER}'
      CONNECTIONSTRINGS__EVENTBUS: 'rabbitmq://${RABBITMQ_USER}:${RABBITMQ_PASS}@${RABBITMQ_HOSTNAME}:5672/${RABBITMQ_VHOST}'
    depends_on:
      - rabbitmq
      - identity-db
      - discovery-api1
      - emailing-api1
    ports:
      - ${IDENTITY_API_PORT}
  identity-api2:
    <<: *identity-api_base
    container_name: '${IDENTITY_API_HOSTNAME}2'
    environment:
      <<: *identity-api_env
      HOSTNAME: '${IDENTITY_API_HOSTNAME}2'
  identity-api3:
    <<: *identity-api_base
    container_name: '${IDENTITY_API_HOSTNAME}3'
    environment:
      <<: *identity-api_env
      HOSTNAME: '${IDENTITY_API_HOSTNAME}3'

  blogging-db:
    image: postgres:alpine
    container_name: ${BLOGGING_DB_HOSTNAME}
    restart: on-failure
    deploy:
      mode: global
    environment:
      POSTGRES_USER: '${BLOGGING_DB_POSTGRES_USER}'
      POSTGRES_PASSWORD: '${BLOGGING_DB_POSTGRES_PASSWORD}'
    ports:
      - ${BLOGGING_DB_PORT}

  blogging-api: &blogging-api_base
    image: blog/blogging-api
    container_name: ${BLOGGING_API_HOSTNAME}
    restart: on-failure
    build:
      context: .
      dockerfile: Services/Blogging/Blogging.API/Dockerfile
    environment: &blogging-api_env
      ASPNETCORE_ENVIRONMENT: Development
      HOSTNAME: ${BLOGGING_API_HOSTNAME}
      PORT: ${BLOGGING_API_PORT}
      CONNECTIONSTRINGS__BLOGGINGDB: 'host=${BLOGGING_DB_HOSTNAME};port=5432;database=${BLOGGING_DB_HOSTNAME};password=${BLOGGING_DB_POSTGRES_PASSWORD};username=${BLOGGING_DB_POSTGRES_USER}'
      CONNECTIONSTRINGS__EVENTBUS: 'rabbitmq://${RABBITMQ_USER}:${RABBITMQ_PASS}@${RABBITMQ_HOSTNAME}:5672/${RABBITMQ_VHOST}'
    depends_on:
      - rabbitmq
      - blogging-db
      - discovery-api1
      - emailing-api1
    ports:
      - ${BLOGGING_API_PORT}
  blogging-api2:
    <<: *blogging-api_base
    container_name: '${BLOGGING_API_HOSTNAME}2'
    environment:
      <<: *blogging-api_env
      HOSTNAME: '${BLOGGING_API_HOSTNAME}2'
  blogging-api3:
    <<: *blogging-api_base
    container_name: '${BLOGGING_API_HOSTNAME}3'
    environment:
      <<: *blogging-api_env
      HOSTNAME: '${BLOGGING_API_HOSTNAME}3'

  comments-db:
    image: postgres:alpine
    container_name: ${COMMENTS_DB_HOSTNAME}
    restart: on-failure
    deploy:
      mode: global
    environment:
      POSTGRES_USER: '${COMMENTS_DB_POSTGRES_USER}'
      POSTGRES_PASSWORD: '${COMMENTS_DB_POSTGRES_PASSWORD}'
    ports:
      - ${COMMENTS_DB_PORT}

  comments-api: &comments-api_base
    image: blog/comments-api
    restart: on-failure
    container_name: ${COMMENTS_API_HOSTNAME}
    build:
      context: .
      dockerfile: Services/Comments/Comments.API/Dockerfile
    environment: &comments-api_env
      ASPNETCORE_ENVIRONMENT: Development
      HOSTNAME: ${COMMENTS_API_HOSTNAME}
      PORT: ${COMMENTS_API_PORT}
      CONNECTIONSTRINGS__EVENTBUS: 'rabbitmq://${RABBITMQ_USER}:${RABBITMQ_PASS}@${RABBITMQ_HOSTNAME}:5672/${RABBITMQ_VHOST}'
      CONNECTIONSTRINGS__COMMENTSDB: 'host=${COMMENTS_DB_HOSTNAME};port=5432;database=${COMMENTS_DB_HOSTNAME};password=${COMMENTS_DB_POSTGRES_PASSWORD};username=${COMMENTS_DB_POSTGRES_USER}'
    depends_on:
      - rabbitmq
      - comments-db
      - discovery-api1
      - emailing-api1
      - blogging-api1
    ports:
      - ${COMMENTS_API_PORT}
  comments-api2:
    <<: *comments-api_base
    container_name: '${COMMENTS_API_HOSTNAME}2'
    environment:
      <<: *comments-api_env
      HOSTNAME: '${COMMENTS_API_HOSTNAME}2'
  comments-api3:
    <<: *comments-api_base
    container_name: '${COMMENTS_API_HOSTNAME}3'
    environment:
      <<: *comments-api_env
      HOSTNAME: '${COMMENTS_API_HOSTNAME}3'

  webgateway-api:
    image: blog/webgateway-api
    restart: on-failure
    container_name: ${WEBGATEWAY_API_HOSTNAME}
    build:
      context: .
      dockerfile: Gateways/WebGateway.API/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      CONNECTIONSTRINGS__EVENTBUS: 'rabbitmq://${RABBITMQ_USER}:${RABBITMQ_PASS}@${RABBITMQ_HOSTNAME}:5672/${RABBITMQ_VHOST}'
    deploy:
      mode: global
    depends_on:
      - rabbitmq1
      - discovery-api1
      - identity-api1
      - blogging-api1
      - comments-api1
      - emailing-api1
    ports:
      - ${WEBGATEWAY_API_PORT}:${WEBGATEWAY_API_PORT}
